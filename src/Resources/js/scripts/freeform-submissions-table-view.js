!function(F){var Q={};function B(U){if(Q[U])return Q[U].exports;var t=Q[U]={i:U,l:!1,exports:{}};return F[U].call(t.exports,t,t.exports,B),t.l=!0,t.exports}B.m=F,B.c=Q,B.d=function(F,Q,U){B.o(F,Q)||Object.defineProperty(F,Q,{enumerable:!0,get:U})},B.r=function(F){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(F,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(F,"__esModule",{value:!0})},B.t=function(F,Q){if(1&Q&&(F=B(F)),8&Q)return F;if(4&Q&&"object"==typeof F&&F&&F.__esModule)return F;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:F}),2&Q&&"string"!=typeof F)for(var t in F)B.d(U,t,function(Q){return F[Q]}.bind(null,t));return U},B.n=function(F){var Q=F&&F.__esModule?function(){return F.default}:function(){return F};return B.d(Q,"a",Q),Q},B.o=function(F,Q){return Object.prototype.hasOwnProperty.call(F,Q)},B.p="",B(B.s=20)}({20:function(module,exports,__webpack_require__){eval('function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nif (_typeof(Craft.Freeform) === ( true ? "undefined" : undefined)) {\n  Craft.Freeform = {};\n}\n/**\n * Class Craft.Freeform.SubmissionsTableView\n */\n\n\nCraft.Freeform.SubmissionsTableView = Craft.TableElementIndexView.extend({\n  startDate: null,\n  endDate: null,\n  startDatepicker: null,\n  endDatepicker: null,\n  $chartExplorer: null,\n  $totalValue: null,\n  $chartContainer: null,\n  $spinner: null,\n  $error: null,\n  $chart: null,\n  $startDate: null,\n  $endDate: null,\n  afterInit: function afterInit() {\n    this.$explorerContainer = $("<div class=\\"chart-explorer-container\\"></div>").prependTo(this.$container);\n    this.createChartExplorer();\n    this.base();\n  },\n  getStorage: function getStorage(key) {\n    return Craft.Freeform.SubmissionsTableView.getStorage(this.elementIndex._namespace, key);\n  },\n  setStorage: function setStorage(key, value) {\n    Craft.Freeform.SubmissionsTableView.setStorage(this.elementIndex._namespace, key, value);\n  },\n  createChartExplorer: function createChartExplorer() {\n    // chart explorer\n    var $chartExplorer = $("<div class=\\"chart-explorer\\"></div>").appendTo(this.$explorerContainer),\n        $chartHeader = $("<div class=\\"chart-header\\"></div>").appendTo($chartExplorer),\n        $dateRange = $("<div class=\\"date-range\\" />").appendTo($chartHeader),\n        $startDateContainer = $("<div class=\\"datewrapper\\"></div>").appendTo($dateRange),\n        $to = $("<span class=\\"to light\\">to</span>").appendTo($dateRange),\n        $endDateContainer = $("<div class=\\"datewrapper\\"></div>").appendTo($dateRange),\n        $total = $("<div class=\\"total\\"></div>").appendTo($chartHeader),\n        $totalLabel = $("<div class=\\"total-label light\\">" + Craft.t("app", "Total Submissions") + "</div>").appendTo($total),\n        $totalValueWrapper = $("<div class=\\"total-value-wrapper\\"></div>").appendTo($total),\n        $totalValue = $("<span class=\\"total-value\\">&nbsp;</span>").appendTo($totalValueWrapper);\n    this.$chartExplorer = $chartExplorer;\n    this.$totalValue = $totalValue;\n    this.$chartContainer = $("<div class=\\"chart-container\\"></div>").appendTo($chartExplorer);\n    this.$spinner = $("<div class=\\"spinner hidden\\" />").prependTo($chartHeader);\n    this.$error = $("<div class=\\"error\\"></div>").appendTo(this.$chartContainer);\n    this.$chart = $("<div class=\\"chart\\"></div>").appendTo(this.$chartContainer);\n    this.$startDate = $("<input type=\\"text\\" class=\\"text\\" size=\\"20\\" autocomplete=\\"off\\" />").appendTo($startDateContainer);\n    this.$endDate = $("<input type=\\"text\\" class=\\"text\\" size=\\"20\\" autocomplete=\\"off\\" />").appendTo($endDateContainer);\n    this.$startDate.datepicker($.extend({\n      onSelect: $.proxy(this, "handleStartDateChange")\n    }, Craft.datepickerOptions));\n    this.$endDate.datepicker($.extend({\n      onSelect: $.proxy(this, "handleEndDateChange")\n    }, Craft.datepickerOptions));\n    this.startDatepicker = this.$startDate.data("datepicker");\n    this.endDatepicker = this.$endDate.data("datepicker");\n    this.addListener(this.$startDate, "keyup", "handleStartDateChange");\n    this.addListener(this.$endDate, "keyup", "handleEndDateChange"); // Set the start/end dates\n\n    var startTime = this.getStorage("startTime") || new Date().getTime() - 60 * 60 * 24 * 30 * 1000,\n        endTime = this.getStorage("endTime") || new Date().getTime();\n    this.setStartDate(new Date(startTime));\n    this.setEndDate(new Date(endTime)); // Load the report\n\n    this.loadReport();\n  },\n  handleStartDateChange: function handleStartDateChange() {\n    if (this.setStartDate(Craft.Freeform.SubmissionsTableView.getDateFromDatepickerInstance(this.startDatepicker))) {\n      this.loadReport();\n    }\n  },\n  handleEndDateChange: function handleEndDateChange() {\n    if (this.setEndDate(Craft.Freeform.SubmissionsTableView.getDateFromDatepickerInstance(this.endDatepicker))) {\n      this.loadReport();\n    }\n  },\n  setStartDate: function setStartDate(date) {\n    // Make sure it has actually changed\n    if (this.startDate && date.getTime() == this.startDate.getTime()) {\n      return false;\n    }\n\n    this.startDate = date;\n    this.setStorage("startTime", this.startDate.getTime());\n    this.$startDate.val(Craft.formatDate(this.startDate)); // If this is after the current end date, set the end date to match it\n\n    if (this.endDate && this.startDate.getTime() > this.endDate.getTime()) {\n      this.setEndDate(new Date(this.startDate.getTime()));\n    }\n\n    return true;\n  },\n  setEndDate: function setEndDate(date) {\n    // Make sure it has actually changed\n    if (this.endDate && date.getTime() == this.endDate.getTime()) {\n      return false;\n    }\n\n    this.endDate = date;\n    this.setStorage("endTime", this.endDate.getTime());\n    this.$endDate.val(Craft.formatDate(this.endDate)); // If this is before the current start date, set the start date to match it\n\n    if (this.startDate && this.endDate.getTime() < this.startDate.getTime()) {\n      this.setStartDate(new Date(this.endDate.getTime()));\n    }\n\n    return true;\n  },\n  loadReport: function loadReport() {\n    var requestData = this.settings.params;\n    requestData.startDate = Craft.Freeform.SubmissionsTableView.getDateValue(this.startDate);\n    requestData.endDate = Craft.Freeform.SubmissionsTableView.getDateValue(this.endDate);\n    requestData.isSpam = false;\n    this.$spinner.removeClass("hidden");\n    this.$error.addClass("hidden");\n    this.$chart.removeClass("error");\n    Craft.postActionRequest("freeform/api/get-submission-data", requestData, $.proxy(function (response, textStatus) {\n      this.$spinner.addClass("hidden");\n\n      if (textStatus == "success" && typeof response.error == "undefined") {\n        if (!this.chart) {\n          this.chart = new Craft.charts.Area(this.$chart);\n        }\n\n        var chartDataTable = new Craft.charts.DataTable(response.dataTable);\n        var chartSettings = {\n          localeDefinition: response.localeDefinition,\n          orientation: response.orientation,\n          formats: response.formats,\n          dataScale: response.scale\n        };\n        this.chart.draw(chartDataTable, chartSettings);\n        this.$totalValue.html(response.totalHtml);\n      } else {\n        var msg = Craft.t("An unknown error occurred.");\n\n        if (typeof response != "undefined" && response && typeof response.error != "undefined") {\n          msg = response.error;\n        }\n\n        this.$error.html(msg);\n        this.$error.removeClass("hidden");\n        this.$chart.addClass("error");\n      }\n    }, this));\n  }\n}, {\n  storage: {},\n  getStorage: function getStorage(namespace, key) {\n    if (Craft.Freeform.SubmissionsTableView.storage[namespace] && Craft.Freeform.SubmissionsTableView.storage[namespace][key]) {\n      return Craft.Freeform.SubmissionsTableView.storage[namespace][key];\n    }\n\n    return null;\n  },\n  setStorage: function setStorage(namespace, key, value) {\n    if (_typeof(Craft.Freeform.SubmissionsTableView.storage[namespace]) == ( true ? "undefined" : undefined)) {\n      Craft.Freeform.SubmissionsTableView.storage[namespace] = {};\n    }\n\n    Craft.Freeform.SubmissionsTableView.storage[namespace][key] = value;\n  },\n  getDateFromDatepickerInstance: function getDateFromDatepickerInstance(inst) {\n    return new Date(inst.currentYear, inst.currentMonth, inst.currentDay);\n  },\n  getDateValue: function getDateValue(date) {\n    return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')}});