!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var I=F[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,U),I.l=!0,I.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)U.d(B,I,function(F){return Q[F]}.bind(null,I));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="",U(U.s=10)}({10:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Creates a RegExp from the given string, converting asterisks to .* expressions,\n * and escaping all other characters.\n */\nvar wildcardToRegExp = function wildcardToRegExp(s) {\n  return new RegExp(\"^\".concat(s.split(/\\*+/).map(regExpEscape).join('.*'), \"$\"), 'i');\n};\n/**\n * RegExp-escapes all characters in the given string.\n */\n\n\nvar regExpEscape = function regExpEscape(s) {\n  return s.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n};\n\nvar RuleSet = function RuleSet(form) {\n  var _this = this;\n\n  _classCallCheck(this, RuleSet);\n\n  this.RULE_TYPE_ANY = 'any';\n  this.RULE_TYPE_ALL = 'all';\n  this.EVENT_APPLY_RULES = 'ff-compile-rules';\n  this.containerMetaData = new WeakMap();\n\n  this.applyRules = function (event) {\n    var container = event.target;\n\n    var _this$containerMetaDa = _this.containerMetaData.get(container),\n        targets = _this$containerMetaDa.targets,\n        _this$containerMetaDa2 = _this$containerMetaDa.rule,\n        type = _this$containerMetaDa2.type,\n        show = _this$containerMetaDa2.show;\n\n    var triggersChange = type === _this.RULE_TYPE_ALL;\n    targets.forEach(function (target) {\n      var elements = target.elements,\n          operand = target.operand,\n          value = target.value;\n      var values = [];\n      var isCheckboxOrRadio = false;\n\n      for (var elementIndex = 0; elementIndex < elements.length; elementIndex++) {\n        var element = elements[elementIndex];\n\n        var _type = element.getAttribute('type');\n\n        if (['checkbox', 'radio'].indexOf(_type) !== -1) {\n          isCheckboxOrRadio = true;\n\n          if (element.checked) {\n            if (_type === 'checkbox' && !/\\]$/.test(element.name)) {\n              values.push('1');\n            } else {\n              values.push(element.value.toLowerCase());\n            }\n          }\n        } else {\n          values.push(element.value.toLowerCase());\n        }\n      }\n\n      var isMatching;\n\n      if (isCheckboxOrRadio && value === '') {\n        isMatching = operand === '=' ? !values.length : !!values.length;\n      } else {\n        var pattern = wildcardToRegExp(value);\n        var valueIsInList = false;\n\n        for (var valIndex = 0; valIndex < values.length; valIndex++) {\n          var val = values[valIndex];\n\n          if (pattern.test(val)) {\n            valueIsInList = true;\n          }\n        }\n\n        isMatching = operand === '=' ? valueIsInList : !valueIsInList;\n      }\n\n      if (type === _this.RULE_TYPE_ANY && isMatching) {\n        triggersChange = true;\n        return;\n      }\n\n      if (type === _this.RULE_TYPE_ALL && !isMatching) {\n        triggersChange = false;\n      }\n    });\n    container.dataset.hiddenByRules = triggersChange ? !show : show;\n    container.style.display = triggersChange ? show ? 'block' : 'none' : show ? 'none' : 'block';\n  };\n\n  this.getInputType = function (element) {\n    var tagName = element.tagName.toLowerCase();\n\n    if (['select', 'textarea'].indexOf(tagName) !== -1) {\n      return tagName;\n    }\n\n    if (element.classList.contains('form-date-time-field')) {\n      return 'date';\n    }\n\n    return element.getAttribute('type').toLowerCase();\n  };\n\n  this.createRuleApplicationEvent = function () {\n    var event = document.createEvent('Event');\n    event.initEvent(_this.EVENT_APPLY_RULES, true, true);\n    return event;\n  };\n\n  if (form.dataset.hasRules === undefined) {\n    return;\n  }\n\n  var containers = form.querySelectorAll('*[data-ff-rule]');\n  containers.forEach(function (container) {\n    var json = container.dataset.ffRule;\n\n    if (/^'.*'$/.test(json)) {\n      json = json.substring(1, json.length - 1);\n    }\n\n    var rule = JSON.parse(json);\n    var targets = [];\n    rule.criteria.forEach(function (criteria) {\n      var target = criteria.tgt,\n          operand = criteria.o,\n          value = criteria.val;\n      var elements;\n      var isMultiple = false;\n\n      if (form.elements[target]) {\n        var tagName = form.elements[target].tagName;\n\n        if (tagName) {\n          elements = [form.elements[target]];\n        } else {\n          elements = form.elements[target];\n        }\n      } else if (form.elements[target + '[]']) {\n        elements = form.elements[target + '[]'];\n        isMultiple = true;\n      }\n\n      targets.push({\n        isMultiple: isMultiple,\n        elements: elements,\n        operand: operand,\n        value: value\n      });\n\n      for (var elementIndex = 0; elementIndex < elements.length; elementIndex++) {\n        var element = elements[elementIndex];\n        var eventType = void 0;\n\n        switch (_this.getInputType(element)) {\n          case 'checkbox':\n          case 'radio':\n            eventType = 'click';\n            break;\n\n          case 'select':\n          case 'date':\n            eventType = 'change';\n            break;\n\n          default:\n            eventType = 'keyup';\n            break;\n        }\n\n        element.addEventListener(eventType, function () {\n          return container.dispatchEvent(_this.createRuleApplicationEvent());\n        });\n      }\n    });\n\n    _this.containerMetaData.set(container, {\n      rule: rule,\n      targets: targets\n    });\n\n    container.addEventListener(_this.EVENT_APPLY_RULES, _this.applyRules);\n    container.dispatchEvent(_this.createRuleApplicationEvent());\n  });\n}\n/**\n * Applies all of the rules for the target container\n * decides whether to show or hide it based on its rules\n *\n * @param event\n */\n;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (RuleSet);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")}});